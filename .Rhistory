shiny::runApp()
runApp()
setwd("~/Desktop/INFO201/a8-app-kaitlyn-cameron/data")
library(shiny)
library(dplyr)
library(ggplot2)
# Full UFO data
ufos <- read.delim("UFOCoords.csv", sep = ',')
# Only USA
ufos <- ufos %>% select(Country, State, AM.PM, Shape) %>% filter(ufos$Country == 'USA')
# Only AM counts
state_am <- filter(ufos, ufos$AM.PM == 'AM')
am_count <- state_am %>% group_by(State) %>% summarize(AM=n())
# Only PM counts
state_pm <- filter(ufos, ufos$AM.PM == 'PM')
pm_count <- state_pm %>% group_by(State) %>% summarize(PM=n())
# States and Regions
ufos_states <- unique(ufos$State)
ufos_states <- sort(ufos_states)
ufos_regions <- state.region
# data with STATE, REGION, AM_COUNT, PM_COUNT
my_ufo_data <- data.frame(am_count, pm_count, ufos_states, ufos_regions, stringsAsFactors = FALSE)
my_ufo_data <- select(my_ufo_data, AM, PM, ufos_states, ufos_regions)
runApp('UFO')
runApp('UFO')
runApp('UFO')
runApp('UFO')
runApp('UFO')
runApp('UFO')
runApp('UFO')
runApp('UFO')
runApp('UFO')
runApp('UFO')
runApp('UFO')
setwd("~/Desktop/INFO201/a8-app-kaitlyn-cameron")
runApp('data/UFO')
runApp('data/UFO')
runApp('data/UFO')
runApp()
runApp()
runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='kaitlyncameron',
token='FDD40D4ADF1DD159DD55F65647F46DA3',
secret='6ILxqPjhffGN2sIbjkc89JmVO7ZdDEBBmjarVhlq')
library(rsconnect)
rsconnect::deployApp('a8-app-kaitlyn-cameron')
rsconnect::deployApp('a8-app-kaitlyn-cameron')
setwd("~/Desktop/INFO201")
rsconnect::deployApp('a8-app-kaitlyn-cameron')
united_kingdom_trends <- getTrends(23424975)
consumer_key <- "RLpoW5fypinjADqc40PzGzwkd"
consumer_secret <- "s04i4QAuoroiLWfA9XHKvZmLxBtVH5h5AuT7WMQrxRfHlkTMZM"
access_token <- "35979821-sAePgek9bc4Ik4OR9yGG83t8UiCWQiWXiglY2YdKw"
access_secret <- "wRK0EyFp0CUfmhxr0PNeSxXdIEb9289en43s4Wq1dqQ40"
united_states_trends <- getTrends(23424977)
source("twitter_keys.R")
library(twitteR)
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
united_states_trends <- getTrends(23424977)
View(united_states_trends)
source("./layout_files/pop_culture.R")
source("./layout_files/tv_shows.R")
source("./layout_files/trending.R")
library(shinythemes)
my_ui <- fluidPage(
theme = shinytheme("cerulean"),
navbarPage("Pop Culture",
tabPanel("Public Figures",
pop_culture
),
tabPanel("Sports"),
tabPanel("Viral Trends"),
tabPanel("TV Shows",
tv_shows)
)
)
shinyUI(my_ui)
runApp('final-purple-pupples')
install("shinythemes")
install.packages("shinythemes")
runApp('~/Desktop/info201Examples/datatableTEST')
install.packages("ggplot2")
install.packages("ggplot2")
runApp('~/Desktop/info201Examples/datatableTEST')
View(mpg)
merge.data(australia_trends, united_states_trends, by="name")
merge.data.frame(australia_trends, united_states_trends, by="name")
australia_trends <- getTrends(23424748)
merge.data.frame(australia_trends, united_states_trends, by="name")
merge.data.frame(australia_trends, united_states_trends, by="name", all= TRUE)
australia_trends$woeid[australia_trends$woeid==23424748]  <- "Australia"
View(australia_trends)
united_states_trends$woeid[united_states_trends$woeid==23424977] <- "United States"
View(united_states_trends)
US_and_Australia <- merge(united_states_trends, australia_trends, by="woeid")
View(US_and_Australia)
US_and_Australia <- merge(united_states_trends, australia_trends, by="woeid", all=TRUE)
View(US_and_Australia)
US_and_Australia <- merge(united_states_trends, australia_trends, by="woeid")
US_and_Australia <- merge(united_states_trends, australia_trends, by="woeid")
View(US_and_Australia)
US_and_Australia <- merge(united_states_trends, australia_trends, by=c("woeid", "name", "url")
US_and_Australia <- merge(united_states_trends, australia_trends, by=c("woeid", "name", "url"))
US_and_Australia <- merge(united_states_trends, australia_trends, by=c("woeid", "name", "url"))
View(US_and_Australia)
US_and_Australia <- merge(united_states_trends, australia_trends, by=c("woeid", "name", "url"), all=TRUE)
VIew(US_and_Australia)
View(US_and_Australia)
US_and_Australia <- merge(united_states_trends, australia_trends, by=c("woeid", "name", "url"))#, all=TRUE)
View(US_and_Australia)
US_and_Australia <- merge(united_states_trends, australia_trends, by=c("woeid", "name", "url"), all=TRUE)
#US_and_Australia <- merge(united_states_trends, australia_trends, by=c("woeid", "name", "url"), all=TRUE)
US_and_Australia <- rbind(united_states_trends, australia_trends)
View(US_and_Australia)
runApp('~/Desktop/info201Examples/datatableTEST')
runApp('~/Desktop/info201Examples/datatableTEST')
runApp('~/Desktop/info201Examples/datatableTEST')
runApp('~/Desktop/info201Examples/datatableTEST')
runApp('~/Desktop/info201Examples/datatableTEST')
runApp('~/Desktop/info201Examples/datatableTEST')
runApp('~/Desktop/info201Examples/datatableTEST')
install.packages("DT")
runApp('~/Desktop/info201Examples/datatableTEST')
runApp('~/Desktop/info201Examples/datatableTEST')
data <- data[data$url == input$link,]
fluidPage(
titlePanel("Basic DataTable"),
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("country",
"Country:",
c("All",
unique(as.character(US_and_Australia$woeid))))
),
column(4,
selectInput("trend",
"Trending Topic:",
c("All",
unique(as.character(US_and_Australia$name))))
),
column(4,
selectInput("link",
"Tweet Link:",
c("All",
unique(as.character(US_and_Australia$url))))
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
runApp('~/Desktop/info201Examples/datatableTEST')
data <- data[data$name == input$trend,]
data <- data[data$url == input$link,]
data <- data[data$name == input$trend,]
if (input$trend != "All") {
data <- data[data$name == input$trend,]
}
library(ggplot2)
library(DT)
fluidPage(
titlePanel("Basic DataTable"),
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("country",
"Country:",
c("All",
unique(as.character(US_and_Australia$woeid))))
),
column(4,
selectInput("trend",
"Trending Topic:",
c("All",
unique(as.character(US_and_Australia$name))))
),
column(4,
selectInput("link",
"Tweet Link:",
c("All",
unique(as.character(US_and_Australia$url))))
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
library(twitteR)
source(keys.R)
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
australia_trends <- getTrends(23424748)
canada_trends <- getTrends(23424775)
brazil_trends <- getTrends(23424768)
egypt_trends <- getTrends(23424802)
ireland_trends <- getTrends(23424803)
france_trends <- getTrends(23424819)
italy_trends <- getTrends(23424853)
japan_trends <- getTrends(23424856)
mexico_trends <- getTrends(23424900)
new_zealand_trends <- getTrends(23424916)
poland_trends <- getTrends(23424923)
philippines_trends <- getTrends(23424934)
united_kingdom_trends <- getTrends(23424975)
united_states_trends <- getTrends(23424977)
#merge.data.frame(australia_trends, united_states_trends, by="name", all= TRUE)
australia_trends$woeid[australia_trends$woeid==23424748]  <- "Australia"
united_states_trends$woeid[united_states_trends$woeid==23424977] <- "United States"
#US_and_Australia <- merge(united_states_trends, australia_trends, by=c("woeid", "name", "url"), all=TRUE)
US_and_Australia <- rbind(united_states_trends, australia_trends)
library(ggplot2)
library(DT)
function(input, output) {
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
data <- US_and_Australia
if (input$country != "All") {
data <- data[data$woeid == input$country,]
}
if (input$link != "All") {
data <- data[data$url == input$link,]
}
if (input$trend != "All") {
data <- data[data$name == input$trend,]
}
data
}))
}
runApp('final-purple-pupples')
install.packages("shinythemes")
install.packages("shinythemes")
runApp('final-purple-pupples')
intstall.packages("ggthemes")
source("./layout_files/pop_culture.R")
source("./layout_files/tv_shows.R")
library(shinythemes)
library(ggthemes)
my_ui <- fluidPage(
theme = shinytheme("cerulean"),
navbarPage("Pop Culture",
tabPanel("Public Figures",
pop_culture
),
tabPanel("Sports"),
tabPanel("Viral Trends"),
tabPanel("TV Shows",
tv_shows)
)
)
shinyUI(my_ui)
runApp('final-purple-pupples')
runApp('final-purple-pupples')
install.packages("ggthemes")
runApp('final-purple-pupples')
install.packages("tm")
runApp('final-purple-pupples')
install.packages("wordcloud")
runApp('final-purple-pupples')
runApp('final-purple-pupples')
runApp('final-purple-pupples')
fluidPage(
titlePanel("Current Trending Topics on Twitter"),
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("country",
"Country:",
c("All",
unique(as.character(US_and_Australia$woeid))))
),
column(4,
selectInput("trend",
"Trending Topic:",
c("All",
unique(as.character(US_and_Australia$name))))
),
column(4,
selectInput("link",
"Tweet Link:",
c("All",
unique(as.character(US_and_Australia$url))))
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
runApp('final-purple-pupples')
library(ggplot2)
library(DT)
fluidPage(
titlePanel("Current Trending Topics on Twitter"),
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("country",
"Country:",
c("All",
unique(as.character(US_and_Australia$woeid))))
),
column(4,
selectInput("trend",
"Trending Topic:",
c("All",
unique(as.character(US_and_Australia$name))))
),
column(4,
selectInput("link",
"Tweet Link:",
c("All",
unique(as.character(US_and_Australia$url))))
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
function(input, output) {
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
data <- US_and_Australia
if (input$country != "All") {
data <- data[data$woeid == input$country,]
}
if (input$link != "All") {
data <- data[data$url == input$link,]
}
if (input$trend != "All") {
data <- data[data$name == input$trend,]
}
data
}))
}
runApp('final-purple-pupples')
runApp('final-purple-pupples')
source("twitter_keys.R")
setwd("~/Desktop/INFO201/final-purple-pupples")
source("twitter_keys.R")
library(twitteR)
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
runApp()
runApp()
united_kingdom_trends <- getTrends(23424975)
View(united_kingdom_trends)
runApp()
australia_trends <- getTrends(23424748)
runApp()
library(twitteR)
#setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
australia_trends <- getTrends(23424748)
united_states_trends <- getTrends(23424977)
canada_trends <- getTrends(23424775)
ireland_trends <- getTrends(23424803)
new_zealand_trends <- getTrends(23424916)
philippines_trends <- getTrends(23424934)
united_kingdom_trends <- getTrends(23424975)
australia_trends$woeid[australia_trends$woeid==23424748]  <- "Australia"
united_states_trends$woeid[united_states_trends$woeid==23424977] <- "United States"
canada_trends$woeid[canada_trends$woeid==23424775] <- "Canada"
ireland_trends$woeid[ireland_trends$woeid==23424803] <- "Ireland"
new_zealand_trends$woeid[new_zealand_trends$woeid==23424916] <- "New Zealand"
philippines_trends$woeid[philippines_trends$woeid==23424934] <- "Philippines"
united_kingdom_trends$woeid[united_kingdom_trends$woeid==23424975] <- "United Kingdom"
View(new_zealand_trends)
all_country_data <- rbind(united_states_trends, australia_trends, canada_trends, ireland_trends, new_zealand_trends, philippines_trends, united_kingdom_trends)
View(all_country_data)
fluidPage(
titlePanel("Current Trending Topics on Twitter"),
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("country",
"Country:",
c("All",
unique(as.character(all_country_data$woeid))))
),
column(4,
selectInput("trend",
"Trending Topic:",
c("All",
unique(as.character(all_country_data$name))))
),
column(4,
selectInput("link",
"Tweet Link:",
c("All",
unique(as.character(all_country_data$url))))
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
runApp()
runApp()
source("twitter_keys.R")
library(twitteR)
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
runApp()
runApp()
runApp()
runApp()
runApp()
source("keys.R")
runApp()
runApp()
source("twitter_keys.R")
runApp()
runApp()
# TRENDS BY COUNTRY
australia_trends <- getTrends(23424748)
runApp()
shiny::runApp()
source("twitter_keys.R")
library(twitteR)
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
